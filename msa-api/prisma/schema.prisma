generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

generator dto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../libs/entity/src/prisma"
  entitySuffix                    = "Entity"
  exportRelationModifierClasses   = "true"
  updateDtoPrefix                 = "Update"
  outputType                      = "class"
  prettier                        = "true"
  definiteAssignmentAssertion     = "false"
  entityPrefix                    = ""
  outputApiPropertyType           = "true"
  requiredResponseApiProperty     = "true"
  usePartialTypeProperty          = "true"
  classValidation                 = "true"
  generateFileTypes               = "all"
  flatResourceStructure           = "false"
  noDependencies                  = "false"
  fileNamingStyle                 = "kebab"
  outputToNestJsResourceStructure = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  dtoSuffix                       = "Dto"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  username            String    @unique(map: "UK_USER__USERNAME")
  fullname            String
  nickname            String?
  language            String?   @default("en")
  password            String
  birthday            DateTime?
  email               String?   @unique(map: "UK_USER__EMAIL")
  lastPassword        String?   @map("last_password")
  cellNumber          String?   @map("cell_number")
  profileImageId      String?   @map("profile_image_id") // MongoDB에선 ObjectId 문자열로 관리
  primaryRoleId       String    @map("primary_role_id")
  gender              Int?      @default(0)
  authFailedCount     Int?      @default(0) @map("auth_failed_count")
  lastSigned          DateTime? @map("last_signed")
  lastPasswordChanged DateTime? @map("last_password_changed")
  lastNickChanged     DateTime? @map("last_nick_changed")
  enabled             Boolean   @default(false)
  isDormant           Boolean   @default(false) @map("dormant")
  userAppStatus       Int?      @default(0) @map("user_app_status")
  isAccountExpired    Boolean   @default(false) @map("account_expired")
  isAccountLocked     Boolean   @default(false) @map("account_locked")
  createdAt           DateTime? @default(now()) @map("created")
  lastModifiedAt      DateTime? @updatedAt @map("last_modified")

  partnerUserDetails Json
  partnerUserRoles   Json
  userRoles          Json
  UserMetas          Json
  Compensation       Json

  @@unique([cellNumber, enabled], map: "UK_USER__CELL_NUMBER")
  @@map("users")
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  parentType  Int     @default(0) @map("parent_type")
  roleCode    String  @map("role_code")
  roleTitle   String  @map("role_title")
  description String?
  locked      Boolean @default(false)

  partnerUserRoles Json
  userRoles        Json
  users            Json

  @@map("roles")
}

model MessageBundle {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  languageCode       String    @default("ko") @map("language_code")
  version            Int       @default(1)
  messageCode        String?   @unique(map: "UQ_MESSAGE_BUNDLE__CODE_TMP") @map("message_code")
  messageTitle       String?   @map("message_title")
  messageContent     String?   @map("message_content")
  messageDescription String?   @map("message_description")
  deleted            Boolean   @default(false)
  createdBy          String?   @map("created_by")
  lastModifiedBy     String?   @map("last_modified_by")
  createdAt          DateTime? @default(now()) @map("created")
  lastModifiedAt     DateTime? @updatedAt @map("last_modified")

  @@unique([languageCode, messageCode], map: "UQ_MESSAGE_BUNDLE__CODE")
  @@map("message_bundles")
}

model Campaign {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  code            String    @unique(map: "UQ_CAMPAIN_CODE")
  title           String
  startDate       DateTime? @map("start_date")
  endDate         DateTime? @map("end_date")
  sortOrder       Int       @default(0) @map("sort_order")
  visible         Boolean   @default(false) // Bit(1)이었음
  enable          Boolean   @default(true) // Bit(1)이었음
  createdBy       String?   @map("created_by")
  lastModifiedBy  String?   @map("last_modified_by")
  createdAt       DateTime? @default(now()) @map("created")
  lasstModifiedAt DateTime? @updatedAt @map("last_modified")

  @@map("campaigns")
}

model CustomerUserDetail {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  token    String?
  migrated Boolean @default(false)

  @@map("customer_user_details")
}

// 이벤트 관련 테이블
model Event {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  code            String
  type            String
  retailStart     DateTime? @map("retail_start")
  retailEnd       DateTime? @map("retail_end")
  title           String    @map("title")
  content         String    @map("content")
  enabled         Boolean   @default(true)
  createdBy       String?   @map("created_by")
  lastModifiedBy  String?   @map("last_modified_by")
  createdAt       DateTime? @default(now()) @map("created")
  lasstModifiedAt DateTime? @updatedAt() @map("last_modified")

  Compensation Json

  @@map("events")
}

// 보상
model Compensation {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  isRewarded      Boolean   @default(false)
  rewardDate      DateTime? @map("reward_date")
  rewardUserId    String    @map("reward_user_id")
  status          String    @map("status")
  createdBy       String?   @map("created_by")
  lastModifiedBy  String?   @map("last_modified_by")
  createdAt       DateTime? @default(now()) @map("created")
  lasstModifiedAt DateTime? @updatedAt() @map("last_modified")

  events  Json
  users   Json
  Event   Json
  eventId Int?

  @@map("compensations")
}

model PartnerUserDetail {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  token             String?
  profileImageId    Int?      @map("profile_image_id")
  userId            String    @map("user_id")
  groupId           Int       @map("group_id")
  jobTitle          String?   @map("job_title")
  color             String?
  bankAccountId     Int?      @map("bank_account_id")
  workingCellNumber String?   @map("working_cell_number")
  nickname          String?
  flag              Int       @default(0)
  createdAt         DateTime? @default(now()) @map("created")
  lastModifiedAt    DateTime? @updatedAt() @map("last_modified")

  user Json

  @@index([profileImageId], map: "FK_PU_DETAIL__ATTACHMENT")
  @@index([bankAccountId], map: "FK_PU_DETAIL__BANK")
  @@index([userId], map: "FK_PU_DETAIL__USER")
  @@map("partner_user_details")
}

model PartnerUserRole {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @map("user_id")
  groupId Int    @map("group_id")
  roleId  String @map("role_id")

  role Json
  user Json

  @@index([groupId], map: "FK_PU_ROLE__GROUP")
  @@index([roleId], map: "FK_PU_ROLE__ROLE")
  @@map("partner_user_roles")
}

model TermTaxonomy {
  termTaxonomyId      String  @id @default(auto()) @map("_id") @db.ObjectId
  termId              String  @map("term_id")
  taxonomy            String  @default("")
  description         String?
  parent              String?
  term                Json
  parentTermTaxonomy  Json
  childTermTaxonomies Json
  tag                 Json

  @@unique([termId, taxonomy, parent], map: "UK_TERM_TAXONOMY")
  @@index([taxonomy], map: "K_TAXONOMY")
  @@map("term_taxonomies")
}

model Tag {
  termTaxonomyId String @id @default(auto()) @map("_id") @db.ObjectId
  termTaxonomy   Json

  @@map("term_taxonomy_tags")
}

model Term {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String @default("")
  slug           String @unique(map: "UK_SLUG") @default("")
  termGroup      Int    @default(0) @map("term_group")
  termTaxonomies Json

  @@index([name], map: "name")
  @@map("terms")
}

model UserMeta {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @map("user_id")
  key       String
  value     String
  valueType String @map("value_type")

  user Json

  @@unique([userId, key], map: "UQ_USER_META")
  @@map("user_meta")
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @map("user_id")
  roleId String @map("role_id")

  role Json
  user Json

  @@index([roleId], map: "FK_U_R_ROLE")
  @@index([userId], map: "FK_U_R_USER")
  @@map("user_roles")
}

enum BannerReferenceType {
  PRODUCT
  BRAND

  @@map("banner_reference_type")
}

enum MetaValueType {
  STRING
  INTEGER
  FLOAT

  @@map("value_type")
}
